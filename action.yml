name: Test-PSModule
description: Test a PowerShell module before publishing the module to the PowerShell Gallery.
branding:
  icon: activity
  color: blue

inputs:
  Name:
    description: The name of the module to build.
    required: false
    default: '*'
  Path:
    description: The path to the module to build.
    required: false
    default: outputs
  CustomTestsPath:
    description: The path to the custom tests to run.
    required: false
    default: $null
  ErrorAction:
    description: The action to take if an error occurs.
    required: false
    default: Stop
  Verbose:
    description: Enable verbose output.
    required: false
    default: 'true'
  WhatIf:
    description: Run in WhatIf mode.
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Run Test-PSModule
      shell: pwsh
      env:
        Name: ${{ inputs.Name }}
        Path: ${{ inputs.Path }}
        CustomTestsPath: ${{ inputs.CustomTestsPath }}
        ErrorAction: ${{ inputs.ErrorAction }}
        Verbose: ${{ inputs.Verbose }}
        WhatIf: ${{ inputs.WhatIf }}
      run: |
        # Test-PSModule
        $ErrorActionPreference = $env:ErrorAction

        Write-Host '::group::Initializing...'
        Write-Output '-------------------------------------------'
        Write-Output 'Action inputs:'
        $params = @{
            Name            = $env:Name
            Path            = Join-Path $env:GITHUB_WORKSPACE $env:Path
            Verbose         = $env:Verbose -eq 'true'
            WhatIf          = $env:WhatIf -eq 'true'
            ErrorAction     = $ErrorActionPreference
        }

        if (-not [string]::IsNullOrEmpty($env:CustomTestsPath)) {
            $params['CustomTestsPath'] = Join-Path $env:GITHUB_WORKSPACE $env:CustomTestsPath
        }

        $params.GetEnumerator() | Sort-Object -Property Name
        Write-Host '::endgroup::'

        try {
            $failedTests = Test-PSModule @params
        } catch {
            Write-Host "::error::$_"
            exit 1
        }

        if ($ErrorActionPreference -like '*Continue') {
            Write-Host '::warning::Errors were ignored.'
            return
        }
